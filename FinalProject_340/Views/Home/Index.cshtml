@model Users;

@{
    ViewData["Title"] = "Title";
    ViewData["Name"] = "Name";
}
<link rel="stylesheet" href="/css/homeView.css">
<script src="~/js/TagReader.js"></script>
<script src="~/js/CenterWindow.js"></script>
    <table class="table table-responsive-sm">
        <thead>
            <tr>
                @*<th colspan="1">&#128420;</th>*@
                <th colspan="1">&nbsp;</th>
                <th colspan="10" style="cursor:pointer" onclick="reloadWindowSort(1)">NAME</th>
                <th colspan="1" style="cursor:pointer" onclick="reloadWindowSort(2)">TIME</th>
                <th colspan="2" style="cursor:pointer" onclick="reloadWindowSort(3)">ARTIST</th>
                <th colspan="2" style="cursor:pointer" onclick="reloadWindowSort(4)">ALBUM</th>
                <th colspan="1" style="cursor:pointer" onclick="reloadWindowSort(5)">PLAYS</th>
                <th colspan="1" class="text-end">&nbsp</th>
                <th colspan="1"></th>
            </tr>
        </thead>
    <tbody id="_trackTable">
        @foreach (FinalProject_340.Models.Song song in Model.getAllTracks((int)ViewData["sort"]))
        {
            <tr id="@song.songHash" class="hover" onclick='playTrack("@song.songHash", "@song.type")'>
                <td colspan="1">
                        @if (song.checkPath(100, 100))
                        {
                            <img height="30" width="30" src='@("/resources/" + @Model.UUID + "/art/" + @song.songHash + "100x100.jpg")' />
                        }
                        else
                        {
                            <img height="0" width="0" src='' />
                        }
                    </td>
                    <td colspan="10">@song.title</td>
                    <td colspan="1">@song.formatTime()</td>
                    <td colspan="2">@song.artist</td>
                    <td colspan="2">@song.album</td>
                    <td colspan="1">@song.plays</td>
                    <td>
                    <img src="~/images/edit.png" height="20" width="20" onclick="updateTrack('@song.songHash')" />
                    <img src="~/images/delete_btn.png" height="20" width="20" onclick="deleteTrack('@song.songHash')" />
                    </td>
                </tr>
            }
            <tr>
                <td colspan="1">
    @*                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-arrow-up" viewBox="0 0 16 16">
                        <path d="M8 11a.5.5 0 0 0 .5-.5V6.707l1.146 1.147a.5.5 0 0 0 .708-.708l-2-2a.5.5 0 0 0-.708 0l-2 2a.5.5 0 1 0 .708.708L7.5 6.707V10.5a.5.5 0 0 0 .5.5z" />
                        <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z" />
                    </svg>*@
                    <img id="img-prev" src="" />
                </td>
                <td class="text-end">&nbsp;</td>
                <td colspan="10"><input id="newTitle" type="text" placeholder="Title" /></td>
                <td colspan="1"><input id="newArtist" type="text" placeholder="Artist"/></td>
                <td colspan="2"><input id="newAlbum" type="text" placeholder="Album" /></td>
                <td colspan="2" style="cursor:pointer">
                    <img src="~/images/new-document.png" height="20" width="20" id="_input"/>
                    @*<button class="btn btn-outline-secondary btn-sm" id="_input"> Upload File</button>*@
                    <input type="file" accept=".mp3,.m4a,.wav,.ogg" id="input" style = "display: none" single />
                    <img src="~/images/picture.png" height="20" width="20" id="_inputImg" />
                    @*<button class="btn btn-outline-secondary btn-sm" id="_inputImg"> Upload Image</button>*@
                    <input type="file" accept=".jpg,.png" id="inputImg" style = "display: none" single />
                </td>
            <td colspan="1" style="cursor:pointer">
                <img src="~/images/upload.png" height="20" width="20" id="_uploadbtn" />
                    @*<button class="btn btn-outline-secondary btn-sm" id="_uploadbtn">Upload</button>*@</td>
            </tr>
        </tbody>
    </table>

<div class="row player player_bg unselectable">
    <div id="progressBar"></div>
    <div id="progressBar_time"></div>
    <div id="control_btn_group">
        <span id="previous_btn" onclick="previousTrack()"></span>
        <span id="play_pause_btn" onclick="toggle_control_btn()"></span>
        <span id="next_btn" onclick="nextTrack()"></span>
    </div>
    <div class="col">
        <div class="row">
            <div class="col" style="max-width: 80px">
                <img style="width: 73px" id="currentPlayingArt" src="~/music.jpg" />
            </div>
            <div class="col">
                <p id="currentlyPlaying"></p>
            </div>
        </div>
    </div>
</div>
<form asp-controller="api" asp-action="uploadBackground" enctype="multipart/form-data">
    <input type="file" name="file" accept=".jpg" />
    <button type="submit">Upload</button>
</form>
<style>
    #currentPlayingArt {
        border-radius : 5px;
    }
    #control_btn_group {
        position: absolute;
        width: 223px;
        height: 70px;
        top: 40px;

    }

    #play_pause_btn {
        display: inline-block;
        width: 70px;
        height: 70px;
        border-radius: 70px;
        background-image: url(new-play-btnsV2.png);
        @*background-image: url(play_btns.png);*@
        background-size:cover;
        background-position-x: 0px;
        background-repeat: repeat;
        cursor: pointer;
        margin-left: 10px;
        margin-right: 10px;
    }

    #next_btn {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 50px;
        border-radius: 50px;
        top: -10px;
        background-image: url(fast-forward-button.png);
        @*background-image: url(play_btns.png);*@
        background-size: cover;
        background-position-x: 0px;
        background-repeat: repeat;
        cursor: pointer;
    }
    #previous_btn {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 50px;
        top: -10px;
        border-radius: 50px;
        background-image: url(fast-backward.png);
        @*background-image: url(play_btns.png);*@
        background-size: cover;
        background-position-x: 0px;
        background-repeat: repeat;
        cursor: pointer;
    }

    .unselectable {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }
    #progressBar {
        position: absolute;
        background-color: forestgreen;
        height: 5px;
        left: -5px;
        top: 0px;
        width:.1px;
        margin:0;
        padding:0;
    }
    .player {
        color: white;
    }

    #progressBar_time{
        position: absolute;
        font-size: 10px;
        top: 6px;
        left: 0px;
        color: rgb(200, 200, 200);
    }

    body {
        height: 100%;
        margin-bottom: 6px;
        overflow: scroll, hidden;
        background: #90EE90;
        @Model.getBackGround();
        background-size:cover;
    }    
</style>

<script>
    let     filename        = null;
    let     currentTrack    = document.createElement("audio");
    let     _t_status       = false;
    const   inputFile       = document.getElementById("input");
    const   inputImg        = document.getElementById("inputImg");
    const   _inputFile      = document.getElementById("_input");
    const   _inputImg       = document.getElementById("_inputImg");
    const   uploadBtn       = document.getElementById("_uploadbtn");
    const   _progressBar    = document.getElementById("progressBar");
    const   currentlyPlaying_text   = document.getElementById("currentlyPlaying");
    const   currentlyPlayingArt     = document.getElementById("currentPlayingArt")
    window.onload = function(){
        uploadBtn.onclick = uploadTrack;
        $("#_input").click( function () { $("#input").trigger('click'); });
        $("#_inputImg").click(  function () { $("#inputImg").trigger('click'); });
        centerWindow("control_btn_group");
    }

    currentTrack.addEventListener('timeupdate', () => {
        const secondsToTime = (_seconds) => {
            let minutes = parseInt(_seconds / 60);
            let seconds = parseInt(_seconds % 60);
            let time = "";
            time = time + minutes + ":";
            if(seconds < 10){
                time = time + "0" + seconds;
            }else{
                time = time + seconds;
            }
            return time;
        };
        const currentTime = currentTrack.currentTime;
        const duration = currentTrack.duration;
        const perc_filled = currentTime/duration;
        _progressBar.style.width = `${window.innerWidth * perc_filled}px`;
        
        document.getElementById("progressBar_time").innerText = secondsToTime(currentTime) + " / " + secondsToTime(duration);
    });

    inputImg.onchange = function() {
        readURL(inputImg)
    }
    function reloadWindowSort(order){
        window.location.href = `/${order}`;
    }
    function readURL(input) {
      if (input.files && input.files[0]) {
        var reader = new FileReader();
        reader.onload = function () {
          $('#img-prev')
            .attr('src', this.result)
            .width(30)
            .height(30)
           ;
        };
        reader.readAsDataURL(input.files[0]);
      }
    }

    inputFile.onchange = function () {
        const reader = new FileReader()
        reader.onload = function () {
            const buffer = this.result
            const mp3tag = new MP3Tag(buffer)
            mp3tag.read()
            let tags = !mp3tag.tags.v1 ? mp3tag.tags.v2 : mp3tag.tags.v1;
            let setLabels = function(object){
                document.getElementById("newTitle") .value = object.title  ? object.title :  "";
                document.getElementById("newArtist").value = object.artist ? object.artist : "";
                document.getElementById("newAlbum") .value = object.album  ? object.album :  "";
            }
            if(mp3tag.tags.v1){
                setLabels({
                    title   : tags.title  ,
                    artist  : tags.artist ,
                    album   : tags.album  ,
                });
            }else if(mp3tag.tags.v2){
                setLabels({
                    title   : tags.TIT2  ,
                    artist  : tags.TPE1  ,
                    album   : tags.TALB  ,
                });
            }
        }

        if (this.files.length > 0) {
            reader.readAsArrayBuffer(this.files[0])
        }
    }
    function uploadTrack() {
        event.preventDefault();
        
        if (!input.files || !input.files[0]) return alert("Failure, please select an audio file to upload");

        let track = inputFile.files[0];
        let album_art = inputImg.files[0];
        let formData = new FormData();
        if (inputImg.files && inputImg.files[0]) formData.append("albumArt", inputImg.files[0]); 
        formData.append("formFile", track);
        formData.append("title"   , document.getElementById("newTitle") .value.toString());
        formData.append("artist"  , document.getElementById("newArtist").value.toString());
        formData.append("album"   , document.getElementById("newAlbum") .value.toString());

        let xhReq = new XMLHttpRequest();
        xhReq.onreadystatechange = function(){
            if (xhReq.readyState == 4 && xhReq.status == 200) {
                alert("Success!");
                window.location.href = "/";
            }
            if (xhReq.readyState == 4 && xhReq.status == 500) {
                alert("Failed!");
                window.location.href = "/";
            }
        }
        xhReq.open("POST", "/api/uploadTrack", true);
        xhReq.send(formData);
    }
    function playTrack(songHash, audio){
        if(!currentTrack.id || songHash !== currentTrack.id){
            if (currentTrack.id) {
                var element_2 = document.getElementById(currentTrack.id);
                element_2.style.removeProperty("background");
                element_2.style.removeProperty("color")
            }

            currentTrack.src = "/resources/@Model.UUID/songs/" + songHash + audio;
            currentTrack.id = songHash;

            updatePlays(songHash);

            var element = document.getElementById(songHash);
            element.style.setProperty("background", "rgba(0, 0, 0, .3)");
            element.style.setProperty("color", "rgba(255, 255, 255, 1)");
            var cells   = element.cells;
            let title   = cells[1].innerText;
            let artist  = cells[3].innerText;
            let album   = cells[4].innerText;

            currentlyPlaying_text.innerText = title + " \n " + artist + "\n" + album;
            currentlyPlayingArt.src = `/resources/@Model.UUID/art/${songHash}500x500.jpg`;
            resumeTrack();
            document.getElementById("play_pause_btn").style.setProperty("background-position-x", `0px`);
        }else{
            toggle_control_btn();
        }
    }
    function toggle_control_btn(){
        if (_t_status) {
            pauseTrack();
            document.getElementById("play_pause_btn").style.setProperty("background-position-x", `-89px` );
        } else {
            resumeTrack();
            document.getElementById("play_pause_btn").style.setProperty("background-position-x", `0px`);
        }
    }
    function pauseTrack() {
        _t_status = false;
        currentTrack.pause();
    }
    function resumeTrack(){
        _t_status = true;
        currentTrack.play();
    }
    function nextTrack() {
        let table_rows = document.getElementById("_trackTable").rows;
        let hash = currentTrack.id;
        for(let i = 0; i < table_rows.length; i++){
            if(hash == table_rows[i].id){
                table_rows[++i].click();
                break;
            }
        }
    }
    function previousTrack() {
        let table_rows = document.getElementById("_trackTable").rows;
        let hash = currentTrack.id;
        for (let i = 0; i < table_rows.length; i++) {
            if (hash == table_rows[i].id) {
                table_rows[--i].click();
                break;
            }
        }
    }
</script>

<script>
    var isEditing = new Map();
    let updateTrack = function (hash){
        event.stopPropagation()
        var eHash       = `_${hash}`;
        if(!isEditing.has(hash)){
            var element     = document.getElementById(hash);
            var cells       = element.cells;
            let title       = cells[1];
            let artist      = cells[3];
            let album       = cells[4];
            let _title      = title.innerText;
            let _artist     = artist.innerText;
            let _album      = album.innerText;
            let btn_html    = cells[6].innerHTML;

            isEditing.set(hash, {
                _title   : _title,
                _artist  : _artist,
                _album   : _album,
                title    : title,
                artist   : artist,
                album    : album,  
                btn_html : btn_html,
                btn_html_b : cells[6],
                element  : element,
                on_fn    : element.onclick,
            });
            element.onclick = null;
            title.innerHTML = `<input id="newTitle${eHash}" type="text" placeholder="${_title}" value="${_title}" />`;
            artist.innerHTML = `<input id="newArtist${eHash}" type="text" placeholder="${_artist}" value="${_artist}" />`;
            album.innerHTML = `<input id="newAlbum${eHash}" type="text" placeholder="${_album}" value="${_album}" />`;

            cells[6].innerHTML = `<button class="btn btn-outline-primary btn-sm" onclick=updateTrack("${hash}")>Confirm</button>`;

        }else{
            let _s_         = isEditing.get(hash);
            let newArtist   = document.getElementById("newArtist" + eHash).value ? document.getElementById("newArtist" + eHash).value : _s_._artist;
            let newTitle    = document.getElementById("newTitle" + eHash).value ? document.getElementById("newTitle" + eHash).value : _s_._title;
            let newAlbum    = document.getElementById("newAlbum" + eHash).value ? document.getElementById("newAlbum" + eHash).value : _s_._album;

            let formData = new FormData();
            formData.append("title", newTitle);
            formData.append("artist", newArtist);
            formData.append("album", newAlbum);
            formData.append("songHash", hash);

            let xhReq = new XMLHttpRequest();
            xhReq.onreadystatechange = function(){
                if (xhReq.readyState == 4 && xhReq.status == 200) {
                    _s_.artist.innerText = newArtist;
                    _s_.title.innerText = newTitle;
                    _s_.album.innerText = newAlbum;
                    _s_.btn_html_b.innerHTML = _s_.btn_html;
                }
                if (xhReq.readyState == 4 && xhReq.status == 500) {
                    alert("Failed!");
                    window.location.href = "/";
                }
            }
            xhReq.open("POST", "/api/updateTrack", true);
            xhReq.send(formData);

            _s_.element.onclick = _s_.on_fn;
            isEditing.delete(hash);
        }

    }
    function updatePlays(hash){
        let formData = new FormData();
        formData.append("plays", 921873);
        formData.append("songHash", hash);
        let xhReq = new XMLHttpRequest();
        xhReq.onreadystatechange = function () {
            if (xhReq.readyState == 4 && xhReq.status == 200) {
                document.getElementById(hash).cells[5].innerText = (parseInt(document.getElementById(hash).cells[5].innerText) + 1).toString();
            }
            if (xhReq.readyState == 4 && xhReq.status == 500) {
        
            }
        }
        xhReq.open("POST", "/api/updateTrack", true);
        xhReq.send(formData);
    }
    function deleteTrack(hash){
        event.stopPropagation()
        fetch(`/api/deleteTrack?hash=${hash}`).then((response) => response.json()).then(function (data) {
            if(data == true){
                document.getElementById(hash).remove();
            }
        });
    }
</script>

 <script>
    window.addEventListener('resize', function () {
        centerWindow("control_btn_group");
    });
    function centerWindow(element_id) {
        let w = window.innerWidth;
        let h = window.innerHeight;

        let element = document.getElementById(element_id);

        let elementWidth = element.getBoundingClientRect().width;
        let elementHeight = element.getBoundingClientRect().height;

        console.log(w + " " + h + " " + elementWidth);

        //element.style.top = (innerHeight * .25) + "px";
        element.style.left = ((innerWidth - elementWidth) * .5) + "px";

    }
 </script>
